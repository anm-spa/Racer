#ifndef LLVM_CLANG_CGFRONTENDACTION_H
#define LLVM_CLANG_CGFRONTENDACTION_H


#include "clang/Driver/Options.h"
#include "clang/Frontend/ASTConsumers.h"
#include "clang/Frontend/FrontendActions.h"
#include "clang/Frontend/CompilerInstance.h"
#include "libExt/CompilerInstanceCtu.h"
#include "clang/Basic/Diagnostic.h"
#include "callGraphAnalysis.h"
#include "commandOptions.h"
#include <fstream> 
#include "clang/Lex/Preprocessor.h"
#include "clang/Tooling/Tooling.h"

using namespace std;
using namespace clang;
using namespace clang::driver;
using namespace clang::tooling;
using namespace llvm;

class CGFrontendAction : public ASTFrontendAction {
  CallGraph &_cg;
public:
  CGFrontendAction(CallGraph &cg)
  : _cg (cg) {}

  virtual std::unique_ptr<clang::ASTConsumer> CreateASTConsumer(CompilerInstance &CI, StringRef file)   {
    llvm::errs()<<"Building Call Graph of "<<file.str()<<"\n";
    std::ofstream Method1(FUNC1.c_str()), Method2(FUNC2.c_str());
    if (Method1.good() && Method2.good()) //errs()<<"Method Name :"<<FUNC.c_str()<<"\n";
      return llvm::make_unique<CGReachabilityInf>(&CI,FUNC1.c_str(),FUNC2.c_str(), _cg); 
    else return llvm::make_unique<CGReachabilityInf>(&CI,_cg);
  }

~CGFrontendAction(){
}

void EndSourceFileAction() {}  
void EndSourceFileCtu() { }

void EndActionOnSourceFile() {}  

void EndFrontendAction()
{
  EndActionOnSourceFile();
  setCompilerInstance(nullptr);
  //setCurrentInput(FrontendInputFile());
}

};

#endif
